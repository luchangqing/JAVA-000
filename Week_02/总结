总结
一、环境 
	macOS 10.15.7 
	CPU 四核I5
	物理内存 8G
	jdk 1.8.0_261

二、小结
	1）、使用jdk8 默认GC是并行GC（Parallel GC）在不指定GC的情况下，默认开启并行GC回收策略
	2）、指定-Xmx，不指定-Xms时，堆内存不会一次性分配完Xmx指定的内存，而是从一个最小值开始，更具内存使用情况不断的动态调整堆内存的大小,但最大堆内存不会超过Xmx指定的大小
	3）、指定-Xmx，也执行-Xms时，堆内存会一次性分配完Xmx指定的内存，这样堆内存中各个内存区域所占的空间固定，及yang区:old区=1:2，Eden:S0:S1=8:1:1
	4）、当堆内存的某个区域（Yong区或者是Old区）的空间不足时，会触发GC回收垃圾对象，释放空间
	5）、GC发生的顺序都是先YongGC后FullGC
  6）当Yong区的对象占据的空间超过80%时，触发YongGC（在指定了-Xmx没指定-Xms的情况下，触发YongGC的同时扩容一次Yong区大小）
  7）当Old区的对象占据的空间超过80%时，会触发FullGC（在指定了-Xmx没指定-Xms的情况下，触发FullGC的同时扩容Old区大小）
  8）窜行GC、并行GC、CMS GC都采用了分代回收内存的策略